"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var fs = require("fs");
var diagnosticMessages = {};
var diagnosticMessagesEn = {};
function configureLocale(config) {
    return __awaiter(this, void 0, void 0, function () {
        var matchResult, language, territory, result, filePath, enFallbackStrings;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (config.directory === '') {
                        return [2 /*return*/, Promise.reject('E_Unspecified_Directory')];
                    }
                    if (config.diagnosticFileName === '') {
                        return [2 /*return*/, Promise.reject('E_Unspecified_Diagnostic_FileName')];
                    }
                    if (config.locale === '') {
                        return [2 /*return*/, Promise.reject('E_Unspecified_Locale')];
                    }
                    if (config.runtime !== 'node' && config.runtime !== 'browser') {
                        return [2 /*return*/, Promise.reject('E_Unsupported_Runtime')];
                    }
                    matchResult = /^([a-z]+)([_\-]([a-z]+))?$/.exec(config.locale.toLowerCase());
                    if (!matchResult) {
                        return [2 /*return*/, Promise.reject('E_Unsupported_Locale')];
                    }
                    language = matchResult[1];
                    territory = matchResult[3];
                    return [4 /*yield*/, trySetLanguageAndTerritory(config, language, territory)];
                case 1:
                    result = _a.sent();
                    if (!!result) return [3 /*break*/, 3];
                    return [4 /*yield*/, trySetLanguageAndTerritory(config, language, undefined)];
                case 2:
                    // Fallback to language only
                    result = _a.sent();
                    _a.label = 3;
                case 3:
                    if (!(result && language !== 'en')) return [3 /*break*/, 5];
                    filePath = path.join(config.directory, 'en', config.diagnosticFileName);
                    return [4 /*yield*/, loadLocalizedStrings(config, filePath)];
                case 4:
                    enFallbackStrings = _a.sent();
                    if (enFallbackStrings) {
                        diagnosticMessagesEn = JSON.parse(enFallbackStrings);
                    }
                    return [3 /*break*/, 7];
                case 5: return [4 /*yield*/, trySetLanguageAndTerritory(config, 'en', undefined)];
                case 6:
                    // Fallback to en
                    result = _a.sent();
                    _a.label = 7;
                case 7:
                    if (!result) {
                        return [2 /*return*/, Promise.reject('E_Locale_Configuration_Error')];
                    }
                    return [2 /*return*/, result];
            }
        });
    });
}
exports.configureLocale = configureLocale;
function translate(key) {
    if (diagnosticMessages[key]) {
        return diagnosticMessages[key];
    }
    else {
        return diagnosticMessagesEn[key];
    }
}
exports.translate = translate;
function translateA(key, args) {
    var format = diagnosticMessages[key];
    if (!format) {
        format = diagnosticMessagesEn[key];
    }
    return format.replace(/{(\d+)}/g, function (_match, index) { return '' + assertDefined(args[+index]); });
}
exports.translateA = translateA;
function trySetLanguageAndTerritory(config, language, territory) {
    return __awaiter(this, void 0, void 0, function () {
        var filePath, fileContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    filePath = path.join(config.directory, language);
                    if (territory) {
                        filePath = filePath + '-' + territory;
                    }
                    filePath = path.join(filePath, config.diagnosticFileName);
                    return [4 /*yield*/, loadLocalizedStrings(config, filePath)];
                case 1:
                    fileContent = _a.sent();
                    if (fileContent) {
                        diagnosticMessages = JSON.parse(fileContent);
                        return [2 /*return*/, Promise.resolve(true)];
                    }
                    else {
                        return [2 /*return*/, Promise.resolve(false)];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
function loadLocalizedStrings(config, filePath) {
    return new Promise(function (resolve, reject) {
        if (config.runtime === 'browser') {
            var request_1 = new XMLHttpRequest();
            request_1.onreadystatechange = function () {
                if (request_1.readyState === XMLHttpRequest.DONE) {
                    if (request_1.status === 200) {
                        return resolve(request_1.responseText);
                    }
                    else {
                        return resolve(undefined);
                    }
                }
            };
            request_1.open('GET', filePath, true);
            request_1.send();
        }
        else {
            if (!fs.existsSync(filePath)) {
                return resolve(undefined);
            }
            var fileContents = fs.readFileSync(filePath).toString();
            return resolve(fileContents);
        }
    });
}
function assertDefined(value, message) {
    if (value === undefined || value === null) {
        throw new Error('E_Arg_Mismatch');
    }
    return value;
}
