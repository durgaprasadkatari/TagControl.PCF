"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require('fs-extra');
const path = require('path');
const { parseString } = require('xml2js');
const controlManifest_1 = require("./controlManifest");
const diagnosticMessages_generated_1 = require("./diagnosticMessages.generated");
const constants = require("./constants");
const lodash_1 = require("lodash");
class ControlContext {
    constructor(diag, controlPath) {
        this.controlPath = controlPath;
        this.loadControlManifest(diag);
    }
    getControlManifest() {
        return this.manifest;
    }
    getControlName() {
        return this.manifest.getConstructor();
    }
    getControlFolderName() {
        return path.basename(this.controlPath);
    }
    getControlPath() {
        return this.controlPath;
    }
    getControlNamespace() {
        return this.manifest.getNamespace();
    }
    getCodeRelativePath() {
        return this.manifest.getCodePath();
    }
    getParsedManifest() {
        return this.parsedResult;
    }
    reloadManifest(diag) {
        this.loadControlManifest(diag);
    }
    // Load control manifest input file
    loadControlManifest(diag) {
        const manifestPath = path.join(this.controlPath, constants.MANIFEST_INPUT_FILE_NAME);
        const rawXml = fs.readFileSync(manifestPath);
        const data = {};
        parseString(rawXml, (err, result) => {
            if (err) {
                diag.pushA(diagnosticMessages_generated_1.strings.manifest_parsing_error, [err.message]);
            }
            else {
                this.parsedResult = lodash_1.cloneDeep(result);
                // flatten all explicit arrays
                if (result && result.manifest && result.manifest.control) {
                    const controlNode = result.manifest.control[0];
                    data.manifest = { control: controlNode };
                    if (controlNode.resources) {
                        data.manifest.control.resources = controlNode.resources[0];
                    }
                    if (controlNode['feature-usage']) {
                        data.manifest.control['feature-usage'] = controlNode['feature-usage'][0];
                    }
                }
            }
        });
        this.manifest = new controlManifest_1.ControlManifest(data);
    }
}
exports.ControlContext = ControlContext;
