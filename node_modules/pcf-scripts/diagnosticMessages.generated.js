"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function diag(code, category, key, message) {
    return { code, category, key, message };
}
/* tslint:disable:max-line-length */
/* tslint:disable:quotemark */
exports.strings = {
    pcf_scripts_usage: diag(1000, "Information", "pcf_scripts_usage", "Usage"),
    pcf_scripts_not_valid_command: diag(1001, "Error", "pcf_scripts_not_valid_command", "Not a valid command."),
    pcf_scripts_start_command: diag(1002, "Information", "pcf_scripts_start_command", "Running - command '{0}'"),
    pcf_scripts_completed_command: diag(1003, "Information", "pcf_scripts_completed_command", "Done - command '{0}' succeeded."),
    pcf_scripts_build_failed: diag(1004, "Error", "pcf_scripts_build_failed", "Build Failed - with error"),
    pcf_scripts_start_missing_control: diag(1005, "Error", "pcf_scripts_start_missing_control", "Missing control files. Please rebuild the control."),
    pcf_start_exited: diag(1006, "Error", "pcf_start_exited", "pcf-start exited with code {0}"),
    buildconfig_mismatched_configuration: diag(1007, "Error", "buildconfig_mismatched_configuration", "The specified value for '{0}' does not resolve to the value defined in '{1}'. Please update the setting in '{1}' to the desired value."),
    buildconfig_unsupported_build_mode: diag(1008, "Error", "buildconfig_unsupported_build_mode", "Unsupported buildMode '{0}' specified. Supported values include 'development' or 'production'."),
    buildconfig_not_defined: diag(1009, "Error", "buildconfig_not_defined", "Value for build configuration '{0}' is not defined."),
    control_manifest_not_found: diag(1010, "Error", "control_manifest_not_found", "No control was found that contains {0}."),
    resource_file_not_found: diag(1011, "Error", "resource_file_not_found", "Resource file {0} not found."),
    path_must_be_file: diag(1012, "Error", "path_must_be_file", "Path {0} must be a valid file."),
    manifest_parsing_error: diag(1013, "Error", "manifest_parsing_error", "Cannot parse manifest: {0}"),
    manifest_validation_error: diag(1014, "Error", "manifest_validation_error", "Manifest validation error: {0}"),
    manifest_empty: diag(1015, "Error", "manifest_empty", "{0} is empty."),
    validation_duplicate_element_name: diag(1016, "Error", "validation_duplicate_element_name", "There are more than one <{0}> elements with name '{1}'."),
    validation_nonexistent_typegroup: diag(1017, "Error", "validation_nonexistent_typegroup", "<{0}> element with name '{1}' references a non-existent <type-group>."),
    validation_duplicate_child_element_name: diag(1018, "Error", "validation_duplicate_child_element_name", "There are more than one <{0}> elements with name '{1}' under the <{2}> element with name '{3}'."),
    validation_duplicate_enum_value: diag(1019, "Error", "validation_duplicate_enum_value", "Duplicate value '{0}' found for Enum under the <{1}> element with name '{2}'."),
    validation_code_path_does_not_exist: diag(1020, "Error", "validation_code_path_does_not_exist", "<code> path {0} does not exist."),
    validation_code_path_must_be_file: diag(1021, "Error", "validation_code_path_must_be_file", "The <code> element's 'path' attribute must reference a valid file."),
    validation_internal_module: diag(1022, "Error", "validation_internal_module", "Control source code declares an internal module or namespace."),
    validation_multiple_exports: diag(1023, "Error", "validation_multiple_exports", "Control source code defines more than one export."),
    command_task: diag(1024, "Info", "command_task", "{0} task"),
    task_validate_manifest: diag(1025, "Info", "task_validate_manifest", "Validating manifest"),
    task_compile_and_bundle: diag(1026, "Info", "task_compile_and_bundle", "Compiling and bundling control"),
    task_generate_manifest_types: diag(1027, "Info", "task_generate_manifest_types", "Generating manifest types"),
    task_generate_build_outputs: diag(1028, "Info", "task_generate_build_outputs", "Generating build outputs"),
    task_validate_control_source: diag(1029, "Info", "task_validate_control_source", "Validating control"),
    task_clean_outputs: diag(1030, "Info", "task_clean_outputs", "Cleaning build outputs"),
    build_context_not_set: diag(1031, "Error", "build_context_not_set", "Build context not set. Call setBuildContext() with a valid build config."),
    buildconfig_no_outdir: diag(1032, "Error", "buildconfig_no_outdir", "The build configuration does not specify an outDir."),
    bundling_error: diag(1033, "Error", "bundling_error", "An error occurred compiling or bundling the control."),
    validation_source_code_error: diag(1034, "Error", "validation_source_code_error", "{0} failed validation: {1}"),
    build_error_generic: diag(1035, "Error", "build_error_generic", "Build failed: {0}"),
    task_start_harness: diag(1036, "Info", "task_start_harness", "Starting control harness"),
    initializing: diag(1037, "Info", "initializing", "Initializing"),
    failed: diag(1038, "Info", "failed", "Failed"),
    succeeded: diag(1039, "Info", "succeeded", "Succeeded"),
    package_version_not_found: diag(1040, "Error", "package_version_not_found", "Unable to determine version for package {0}, missing both package-lock.json and the package's package.json in node_modules."),
    pcf_scripts_not_valid_subcommand: diag(1041, "Error", "pcf_scripts_not_valid_subcommand", "Not a valid sub-command '{0}'."),
    validation_noexistent_dataset_property: diag(1042, "Error", "validation_noexistent_dataset_property", "At least one <data-set> node or <property> should be present."),
    validation_property_usage_not_input: diag(1043, "Error", "validation_property_usage_not_input", "When <data-set> is present usage attribute of <property> can only be 'input'. But property '{0}' has usage of '{1}'"),
    generating_stub_error: diag(1044, "Error", "generating_stub_error", "Failed to generate a valid bundle.js because the ControlManifest.input.xml is not valid"),
    bundle_size_exceeds_max: diag(1045, "Error", "bundle_size_exceeds_max", "The bundle of the component exceeds the maximum size of {0}MB allowed."),
    statistics: diag(1046, "Info", "statistics", "stats")
};
