#!/usr/bin/env node
"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = require("yargs");
const fs = require("fs");
const path = require("path");
const constants = require("../constants");
const taskRunner_1 = require("../taskRunner");
const taskGroup_1 = require("../taskGroup");
const manifestProcessor_1 = require("../manifestProcessor");
const telemetry_1 = require("../generated/telemetry");
const process = require('process');
const uuidv4 = require('uuid/v4');
try {
    telemetry_1.trackEvent(telemetry_1.TelemetryEvent.Start);
    if (!yargs_1.argv._ || yargs_1.argv._.length === 0 || !Object.keys(taskGroup_1.standardTaskGroups).includes(yargs_1.argv._[0])) {
        printUsage();
    }
    let buildSource = telemetry_1.BuildSource.NPM;
    if (yargs_1.argv['buildSource'] === telemetry_1.BuildSource[telemetry_1.BuildSource.VisualStudio]) {
        buildSource = telemetry_1.BuildSource.VisualStudio;
    }
    if (yargs_1.argv['buildSource'] === telemetry_1.BuildSource[telemetry_1.BuildSource.MSBuild]) {
        buildSource = telemetry_1.BuildSource.MSBuild;
    }
    const fileConfig = fs.readFileSync(path.resolve('.', constants.CONFIGURATION_FILE_NAME));
    const config = JSON.parse(fileConfig.toString());
    const customProperties = {
        'Verbs': ['pcf', yargs_1.argv._[0]],
        'ProductVersion': manifestProcessor_1.getPackageVersion(constants.PCF_SCRIPTS_PACKAGE_NAME, process.cwd()) || 'undefined',
        'BuildSource': telemetry_1.BuildSource[buildSource]
    };
    telemetry_1.trackEvent(telemetry_1.TelemetryEvent.StartExecutingVerb, customProperties);
    const taskRunner = new taskRunner_1.TaskRunner(yargs_1.argv, config);
    const startTime = (new Date()).getTime();
    taskRunner.run(taskGroup_1.standardTaskGroups).then((result) => {
        const customMeasurement = {
            'Execution Time(ms)': (new Date()).getTime() - startTime - result.compileTime,
            'Compile Time(ms)': result.compileTime
        };
        customProperties['Success'] = true;
        telemetry_1.trackEvent(telemetry_1.TelemetryEvent.EndExecutingVerb, customProperties, customMeasurement);
        telemetry_1.trackEvent(telemetry_1.TelemetryEvent.End);
        telemetry_1.flushTelemetry();
    }).catch((e) => {
        onError(e);
    });
}
catch (e) {
    onError(e);
}
function onError(e) {
    telemetry_1.trackException(e, { 'ExceptionId': uuidv4() });
    telemetry_1.flushTelemetry();
    console.error(`[pcf-scripts] [Error] encountered unexpected error:\n${e}`);
    process.exitCode = 1;
}
function printUsage() {
    console.log('Unsupported command');
    console.log(`Usage: pcf-scripts ${Object.keys(taskGroup_1.standardTaskGroups).map(verb => '[' + verb + ']').join(' ')}`);
    process.exit(0);
}
